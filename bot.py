import os
import telebot
from flask import Flask, request
from telebot import types
import random
import logging
from datetime import date

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------
TOKEN = os.environ["TELEGRAM_TOKEN"]
APP_URL = os.environ["WEBHOOK_URL"]

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# -------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# -------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
# -------------------------
try:
    with open("phrases.txt", "r", encoding="utf-8") as f:
        content = f.read()
    phrases = [p.strip() for p in content.split('---') if p.strip()]
    if not phrases:
        phrases = ["–§–∞–π–ª –ø—É—Å—Ç! –î–æ–±–∞–≤—å —Å–æ–≤–µ—Ç—ã —á–µ—Ä–µ–∑ ---"]
except FileNotFoundError:
    phrases = ["–§–∞–π–ª —Å —Å–æ–≤–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å phrases.txt –≤ –ø—Ä–æ–µ–∫—Ç."]

logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(phrases)} —Å–æ–≤–µ—Ç–æ–≤")

# -------------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–≤–µ—Ç–æ–≤
# -------------------------
daily_phrase = {}
last_phrase = {}

def get_daily_phrase(chat_id):
    """–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    today = str(date.today())
    if daily_phrase.get(chat_id, {}).get("date") != today:
        phrase = random.choice(phrases)
        daily_phrase[chat_id] = {"date": today, "phrase": phrase}
    return daily_phrase[chat_id]["phrase"]

def get_random_phrase(chat_id):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    available = [p for p in phrases if p != last_phrase.get(chat_id)]
    phrase = random.choice(available) if available else random.choice(phrases)
    last_phrase[chat_id] = phrase
    return phrase

def get_keyboard():
    """–ï–¥–∏–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = types.InlineKeyboardMarkup()
    day_button = types.InlineKeyboardButton(text="üìÖ –°–æ–≤–µ—Ç –¥–Ω—è", callback_data="daily")
    again_button = types.InlineKeyboardButton(text="üí° –ù–æ–≤—ã–π —Å–æ–≤–µ—Ç", callback_data="random")
    keyboard.add(day_button, again_button)
    return keyboard

# -------------------------
# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
# -------------------------
@bot.message_handler(commands=['start'])
def start_msg(message):
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass  

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–æ–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üåû\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=get_keyboard()
    )

# -------------------------
# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
# -------------------------
@bot.callback_query_handler(func=lambda c: True)
def callback_inline(c):
    if c.data == "daily":
        bot.answer_callback_query(c.id)
        phrase = get_daily_phrase(c.message.chat.id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: get_daily ‚Üí get_daily_phrase
        text = f"üìÖ <b>–°–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{phrase}"

    elif c.data == "random":
        bot.answer_callback_query(c.id)
        phrase = get_random_phrase(c.message.chat.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ get_random –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        text = f"üí° <b>–°–æ–≤–µ—Ç:</b>\n\n{phrase}"

    else:
        return

    kb = get_keyboard()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: keyboard ‚Üí get_keyboard

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
    if c.message.text != text:
        try:
            bot.edit_message_text(
                chat_id=c.message.chat.id,
                message_id=c.message.message_id,
                text=text,
                reply_markup=kb,
                disable_web_page_preview=True
            )
        except:
            bot.send_message(c.message.chat.id, text, reply_markup=kb)
    else:
        # –¢–æ–ª—å–∫–æ –≤—Å–ø–ª—ã–≤–∞—à–∫–∞, –±–µ–∑ –¥—É–±–ª—è
        bot.answer_callback_query(c.id, "–°–æ–≤–µ—Ç –¥–Ω—è —É–∂–µ –≤—ã–¥–∞–Ω ‚úÖ")

    logging.info(f"User {c.message.chat.id} –ø–æ–ª—É—á–∏–ª: {phrase}")
    
# -------------------------
# Route –¥–ª—è webhook
# -------------------------
@app.route("/webhook", methods=["POST"])
def webhook():
    json_str = request.get_data(as_text=True)
    if not json_str:
        return "empty", 200
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

# -------------------------
# –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
# -------------------------
@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    bot.remove_webhook()
    success = bot.set_webhook(url=f"{APP_URL}/webhook")
    return f"Webhook set: {success}", 200
    
@app.route("/", methods=["GET", "HEAD"])
def index():
    return "Bot is running", 200
# -------------------------
# –ó–∞–ø—É—Å–∫ Flask + –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
# -------------------------
if __name__ == "__main__":
    bot.remove_webhook()
    success = bot.set_webhook(url=f"{APP_URL}/webhook")
    logging.info(f"Webhook set automatically: {success}")

    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
